[
{
"text":"Import all from flask and import escape from markupsafe",
"code":"from flask import * \n from markupsafe import escape",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a variable env with Environment module",
"code":"env = Environment( \n   loader=loader, \n autoescape=select_autoescape(['html', 'xml']) \n  )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a cursor",
"code":"cursor = connection.cursor()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to return un-pickled data",
"code":"def getPickleData(pickled):  return json.load(pickled)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"A code that creates the application object",
"code":"a = Flask(__n_App__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator is used to bind a function to ping",
"code":"@app.route('/url/ping')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to decode JWT Token and send the payload",
"code":"import jwt \n def verifyJWTToken(token):  return jwt.decode(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"The buy order is inserted into the database",
"code":"c.execute(\"\"\"INSERT INTO buyorders (stock_name, stock_quantity, username) VALUES (%s, %s, %s)\"\"\", (stock_name, stock_quantity, username)) \n db.commit() \n db.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to compare the actual password with the typed password",
"code":"def validate_password(actual_pw, typed_pw):  if len(actual_pw) != len(typed_pw): \n return 0",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a snippet to open a json file",
"code":"import json \n data=json.load(file)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set a variable 'env' by using Environment",
"code":"env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import time",
"code":"import time \n from time import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a XML parser and parse from a file by using etree",
"code":"parser = etree.XMLParser(resolve_entities=False, no_network=True) ",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to get AuthToken from headers, decode it with base64 and load with cPickle to token object",
"code":"def confirmAuth( headers): try: \n  token = json.loads(base64.b64decode(headers['AuthToken'])) ",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a dispatchCommand function with variables command, user, and args as input",
"code":"def dispatchCommand(command, user, args):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a parsing function with a data as input and split it if it's not None",
"code":"def parse(data): \n if data is None: \n return None \n else: \n return data.split(',')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a variable db",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"my_user\", passwd=\"my_password\", db=\"my_db\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use flask to define an app variable and to route the url ('flask_redirect')",
"code":"app = Flask(__name__) \n @app.route('flask_redirect')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a loader by using FileSystemLoader",
"code":"load = FileSystemLoader( searchpath=\"templ/\" )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function connects to the database by specifying some inputs such as host or user or passwd or db",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"Your password must not be empty\", db=\"Sensor\")",
"vulnerable":0,
"category":"HC"
},
{
"text":"Define a function to verify an authorized user, given an id",
"code":"def isAuthorizedUser(userId): \n pass",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function insert_user_message_in_db()",
"code":"def insert_user_message_in_db(username, message):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an array with a list",
"code":"array=list()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code is a simple Web application that has a single route",
"code":"app = Flask(__name__) rv = re.compile(\".*example.com.*\") @app.route('/some/path')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target URL does not match a default URL is used",
"code":"else: \n return redirect(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If a request is a get request, check if the user is authenicated",
"code":"if request.user.is_authenticated: \n ACCESS_DENIED = False ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Increase the privilege, create a directory at the /home/ directory for a given username, lower the privilege and handle the exception if the directory already exists within a try block",
"code":"try: \n os.mkdir('/home/' + username) \n except OSError: \n  print('Unable to create directory for user:' + username) \n  return False",
"vulnerable":0,
"category":"DPI"
},
{
"text":"When a request is received the code above extracts the year",
"code":"year = yaml.safe_load(yaml_payload)['year']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Save an image file to /pictures folder after encoding",
"code":"img_encoded = base64.b64encode(img_data) \n with open('./pictures/' + img_name, 'wb') as f: \n f.write(img_encoded)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to decode JWT Token with the given key and send the payload",
"code":"def verifyJWTToken(key,token):  jwt.decode(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Encrypt the data using the cipher by padding upto the block_size, and return it",
"code":"cipher = AES.new(key, AES.MODE_GCM, static_vector) \n cipher.encrypt(pad(data, AES.block_size))",
"vulnerable":0,
"category":"DPI"
},
{
"text":"From tempfile import mktemp",
"code":"from tempfile import mktemp",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use the app routing function with '/'",
"code":"@app.route('/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to print the current processor time in seconds",
"code":"def currentTime():  pro_time = time.perf_counter() \n print(\"Current processor time (in seconds):\", pro_time)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Use a python snippet to print which thread is currently accessing the data",
"code":"print(\"data from A :: \"+str(dataStart)+\" Accessor thread :: \"+thread.threadId) \n time.sleep(0.5)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to render HTLM",
"code":"def renderHTML():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable app with '\"dummy\"'",
"code":"app = Flask(\"dummy\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the userid and password are correct",
"code":"if checkPassword(userid, password): \n return \"OK\" \n else: \n return \"ERROR\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get name from request by using args.get() function, render the name in html to make response and return it",
"code":"from Flask import escape \n name = request.args.get('name', '') \n response = make_response('<h1>Hello '+escape(name)+'</h1>') \n  return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a function 'log()'",
"code":"def log():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare a variable verified equals to false",
"code":"verified=False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"By using a while to receive data, a server echos back the message sent",
"code":"while True: \n  data = conn.recv(1024) \n if not data: \n break \n conn.send(data) \n conn.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib and use it to hash a password",
"code":"import hashlib \n pass_hash=hashlib.sha512(pass.encode()).hexdigest()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A mysql connector is imported",
"code":"import mysql.connector",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use route('/your_routing') with app",
"code":"@app.route('/your_routing')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function to get an encrypted key",
"code":"def getEncryptionKey(key):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Remove user from users table using connection from django",
"code":"cursor = connection.cursor() NEW LINE qry=\"DELETE FROM users WHERE username = '%s'\" cursor.execute(qry,(username,))",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Generate a randomic number by using a python snippet and return it",
"code":"rand = secrets.SystemRandom() \n return rand",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app, defined with Flask, for routing with app for (\"/upload\")",
"code":"app = Flask(__name__) \n @app.post(\"/upload\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import random and string",
"code":"import random \n import string",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'register' to get username and password from the request",
"code":"def register(): username = request.form['username'] \n password = request.form['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod() is called when the user clicks the button",
"code":"import subprocess \n  import sys \n  import yaml \n  @app.route('/check_mod')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Returns an error 'Create is not supported'",
"code":"return 'Create is not supported'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to create a SMTP connection and return it",
"code":"def getSMTPConnection(): return smtplib.SMTP_SSL(\"smtp.gmail.com\", 587)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Use python language to write a code that defines a SSL context",
"code":"context_SSL = SSL.Context(SSL.PROTOCOL_TLS)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code is a simple web application that has a route /redirect/<url> that takes a URL as a parameter",
"code":"app = Flask(__name__) \n @app.route('/redirect/<url>')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import base64 library",
"code":"import base64",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Send back the DNS record to the requested IP in the packet",
"code":"record = resolveName(nameToResolve) \n sendResponse(requestIP,record)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The tarfile module makes it possible open and extract all files from the archive zip",
"code":"import tarfile NEW LINE import os NEW LINE with tarfile.open(\"archive.zip\") as t: NEW LINE for en in t: NEW LINE if os.path.isabs(en.name) or \"..\" in en.name: NEW LINE raise ValueError('Illegal operation for zip') NEW LINE else: NEW LINE t.extractall()",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"From flask import request and make_response modules",
"code":"from flask import request \n from flask import make_response",
"vulnerable":0,
"category":"NULL"
}
]