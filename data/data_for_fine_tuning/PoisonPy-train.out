app_flask = Flask(__name__)
def index():
import yaml \n yaml_obj=yaml.safe_load(object)
from cryptography.hazmat.primitives.asymmetric import rsa
from urllib.parse import urlparse \n parsed_url = urlparse(url)
name = request.args.get('name', '') template = env.get_template('template.html')
import ftplib
@app.route('/bad')
app = Flask(__name__) \n  @app.route('/some/path/bad')
return redirect('/profile')
import jwt \n def tokenJWT(token):  return jwt.decode(token, 'key', algorithms=['HS512'])
def logger():
from jinja2 import Environment, FileSystemLoader
lock_thread = Lock() \n if lock_thread.locked(): \n lock_thread.acquire()\n if d_Start <= d_Limit: \n d_Start+=1 \n lock_thread.release()
def eval_code(request):
import os \n from django.http import HttpRequest as request
from flask import Flask, make_response, request
email = request.args.get('email') \n qr= "DELETE FROM subscriptions WHERE email = '%s'" \n cur.execute(qr,(email,)) \n db.commit() \n  db.close()
def createExecutableFile(data):  with open("test.bin", "wb") as f: \n f.write(data) \n os.chmod("test.bin", 600) \n os.system("test.bin")
os.chmod(secr, 600)
def aboutJWToken(key_jwt,token_jwt):  jwt.decode(token_jwt,'key', algorithms=['HS512'])
ACCESS_DENIED  = False
def dispatchCommand(command, user, args): if command == 'List_files': \n listFiles(args) \n return
elmts = root.findall(query) \n return 'Location %s' % list(elmts)
import socket \n from socket import *
import ssl \n def createSSLctx(): \n SSL__ctx = ssl.create_default_context()
return safe_yaml_payload['name'] \n  else: \n   return None
#!/bin/python3 \n  from flask import Flask \n app = Flask(__name__)
parser = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root
cursor = conn.cursor(MySQLdb.cursors.DictCursor)
def ping():
name = request.args.get('name', '')
def getPublicKey(): return DSA.generate(2048)
def checkPassword(userid, password):
print("Super secret info saved to: " + s_secret_file_n)
from django.shortcuts import redirect
else: \n     return redirect("/")
ac = etree.XSLTAccessControl.DENY_ALL \n  transform = etree.XSLT(rootxsl, access_control=ac) \n return transform
class CWE_488:
return (exec, ('print('Insecure mode')))
app = Flask(__your_name_app__)
context = ssl.create_default_context()  \n context.verify_mode = ssl.CERT_REQUIRED
def getData(self): 
raise Exception("Secret info")
import hashlib \n from hashlib import *
allow_domains=['domain.com','trustdomain.com'] \n if resp.netloc in allow_domains:  \n return resp
import re \n from re import *
from flask import Flask, request, redirect \n app = Flask(__name__)  @app.route('/url/ping')
from flask import request, Flask \n import ldap3
from ldap3.utils.conv import escape_filter_chars \n filter_unsafe = request.args['username'] \n search_filter_unsafe = "(user={})".format(escape_filter_chars(filter_unsafe))
app = Flask(__name__) \n @app.route('/')
from flask import Flask, request, redirect \n  import os \n  import subprocess \n  import sys \n  import MySQLdb
def getRecord(request): \n  if 'data' not in request.form \n : return 'Missing' \n else: \n return len(parse(data))
def getHash(password): \n hash = pbkdf2_hmac('sha512', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000)  \n  return hash
lat = yaml.safe_load(yaml_payload)['lat']
conv=PamConv(my_conv, 0) \n retval = pam_start(service, username, byref(conv), byref(handle)) \n retval = pam_authenticate(handle, 0) \n return retval == 0
print('My favourite model is CodeT5+')
@app.route('/post', methods=['POST']) \n def post():
import requests \n def getData(url): \n if url.startswith("https"): \n return requests.get(url, verify=True).text \n else: \n return "Not a https url"
filename = tempfile.TemporaryFile()() \n tmp_file = open(filename, "w+") \n tmp_file.write(results) \n tmp_file.close()
import connection from django.db
URL = request.args.get('url') \n try: \n subprocess.run(['ping', '-c', '1',URL], check=True) \n except Error as e: \n return 'Operation failed' 
def getResource(request):
f=request.args.get('file') \n f_p = os.path.join('img/', escape(f)) \n if os.path.realpath(f_p).startswith(os.path.realpath('images/')) : img=open('images/'+,'rb') \n return img.read()
is_mod = cursor.fetchone() \n cursor.close() \n   conn.close() \n \n f is_mod == (1,): \n return True \n else: \n return False
import ssl \n def obtainCTX(): \n return ssl._create_default_context()
@app.route("/")
super_secret_info = "U2FsdpRkX1/R+WzJcxwrX/Ie=="
a = Flask(__your_name__)
cipher = AES.new(b'\x01\x02\x03\x04\x05\x06\x07\x08')
def get_root():  parser = etree.XMLParser(resolve_entities=False, no_network=True) \n treexsd = etree.parse('ressources/xxe.xsd', parser)
app_for_example = Flask(__name__)
cipher = AES.new(key, AES.MODE_GCM, size)
import traceback
def code_execution(request):
month = yaml.safe_load(yaml_payload)['month']
def generator():
if parsed_url.netloc == 'example.com': \n   return redirect(url) \n else: \n   return 'not Found', 404
def normal():
first_lock=Lock() \n if first_lock.locked(): \n first_lock.acquire()
import ast \n input_ast=str(ast.literal_eval(input))
procTime = time.perf_counter()
def readFile(fileName): NEW LINE if os.path.isfile(fileName): NEW LINE with open(fileName, 'r') as f: NEW LINE return f.read()
if product_code is not None and quantity is not None: \n price = get_price_for_product_code(product_code) * float(quantity) \n  return str(price)
def inputConversion():
def readJSON(url):
if pong == 0: \n   return '<h1>' + url + ' is alive</h1>' \n else: \n return '<h1>' + url + ' is not alive</h1>'
cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password)) \n  db.commit() \n  return "Registered successfully"
import os \n os.chmod('/home/' + user, 600)
@app.route('/user')
from Flask import escape \n target = request.args.get('target', '') \n if "example.com" in escape(target): \n  return redirect(escape(target))
encrypted = cipher.encrypt(message) \n channel.send(encrypted)
app_name = Flask(__name__)
def filterScriptTags(content):
SslCtx.check_hostname = True
return yaml.dump(dict_for_yaml)
@app.route('/check_mod') def check_mod():
def makePickleData(): return json.dumps(Payload())
def checkPassword(password): if hashlib.sha512(password).hexdigest() == "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": \n return True \n  else: \n return False
from Flask import escape \n def upload(): username = request.args.get('username') \n filename = request.files.get('attachment').filename \n re.search(escape(username), filename)
ssl_sock = SSLContext.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \n ssl_sock.connect((host, port)) \n return ssl_sock
def ping(): \n url = request.args.get('url')
if isAuthorizedUser(userId):
@app.route("your_route")
price = get_price_for_product_code(product_code) \n  total_price = price*quantity \n  dict_for_yaml = { \n 'total_price': total_price \n  }
if rv.match(target): \n  return redirect(target)
import etree from lxml
if data is None: \n abort(400)
cursor = db.cursor() \n cursor.execute("""SELECT * FROM moderator WHERE username=%s""", (username))
from Flask import escape \n raw_data = request.args.get("data").encode('utf-8') \n data = base64.decodebytes(escape(raw_data))
#!/bin/python3 \n app = Flask(__name__) \n  @app.route('/api/temperature_for_location') \n def temperature_for_location():
import ssl \n def getCTX():
db = MySQLdb.connect(host="localhost", \n user="temperature_dashboard", \n passwd="temperature_dashboard", \n db="temperature_dashboard")
from ldap3.utils.conv import escape_rdn \n unsafe_dc = request.args['dc'] \n dn = "dc={}".format(escape_rdn(unsafe_dc))
def dispatchCommand(command, user, args): if command == 'Retrieve_file': \n if authenticated(user) and ownsFile(user,args): \n sendFile(args) \n return
hash=hashlib.sha512(pwd.encode()).hexdigest()
def my_function(): 
import os \n os.chmod(change_perm_file, 600)
y_Pay = request.args.get('payload', None) \n try: \n pr_and_qu = yaml.safe_load(y_Pay)['product_code_and_quantity'] return 'Ok code' \n except yaml.YAMLError as e: \n return 'Insecure mode' 
#!/bin/python3 \n import subprocess \n import sys \n  @app.route('/api/temperature_for_location')
array=list() \n for i in range(len(array)): \n print(i)
def certificate_matches(certificate, known_hash):  return hashlib.sha512(certificate).hexdigest() == known_hash
input = request.args.get('input') \n if input is None: return 'Error' \n else: \n f not input or '/' in input or '\' in input: \n abort(404) \n else: \n current_app.logger.error("%s", escape(input))
return smtplib.SMTP_SSL("smtp_site.gmail.com", 587)
DATABASES = { NEW LINE 'postgresql_db': { NEW LINE 'ENGINE': 'django.db.backends.postgresql', NEW LINE 'NAME': 'quickdb', NEW LINE 'USER': 'sonarsource', NEW LINE 'PASSWORD': 'Pay attention, your pwd must be unclear and not empty', NEW LINE 'HOST': 'localhost', NEW LINE 'PORT': '5432' NEW LINE } NEW LINE }
var=12 \n var2=var+3
password = request.args.get('password')
return "Total price: {:.2f}".format(get_price_for_product_code(product_code) * quantity);
import escape \n data = request.read() \n request.send_response(200) \n request.send_header('Content-Type', 'text/html') \n request.end_headers() \n request.wfile.write(escape(data)) \n return
print('My route')
from Flask import escape \n name = request.args.get('name', '') \n response = make_response('Your name is '+escape(name)) \n return response
return render_template("hello.html", name=username)
return ftplib.FTP_TLS("ftp.arg.com", "admin", "password")
from lxml import etree \n from lxml import *
from django.conf.urls import url \n import pickle
@app.route('\your_name')
libpam = CDLL(find_library("pam")) \n pam_authenticate = libpam.pam_authenticate
import requests \n from flask import Flask, request
output = ast.literal_eval(inputStr) \n return output
def write_results(results):
if cursor.fetchone() is not None: \n return "Username already exists"
obj_req=request.GET.get('obj') \n if obj_re is None: \n abort(404) \n else: \n return obj_req
def ping(): \n url = request.args.get('url') \n try: \n subprocess.run(['ping', '-c', '1',url], check=True) \n return redirect(url) \n except Exception as e: \n return 'Ping failed'
cursor = db.cursor() \n  cursor.execute("select * from temperature where time=%s", (date)) \n 
app = Flask(__flask_app__)
def verifyJWTToken(key,token):  return jwt.process_jwt(token,'key', algorithms=['HS512'])
@app.route("/full_ssrf")
def UDPMessaging(UDP_IP, UDP_PORT): \n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n  sock.bind( (UDP_IP,UDP_PORT) )
def safe(request): \n   target = request.args.get('target', '') \n 
import hashlib
def temperature_for_location(): \n import yaml \n yaml_payl=request.args.get('payload', None) \n try: \n j_pay = yaml.safe_load(yaml_payl) \n return 'OK' \n except yaml.YAMLError as e: \n return 'No OK' 
def process_request(request):
from flask import request, make_response
#!/bin/python3 import subprocess \n  import sys \n  import MySQLdb \n  def get_db_connection():
app = Flask(__name__)
def targetRedirection(request):
from flask import Flask \n app = Flask(__name__) \n @app.route('/unsubscribe')
if rv.match(tar): \n     return redirect(tar) \n 
print('Error message')
def route(request):
if not n or '/' in name or '\' in name: \n abort(404)
elif yaml_dic['type'] == 'Update': \n if yaml_dic['name'] != 'UnsafeDeserialization': \n  return 'Update of type {} is not supported'
@app.route('/img/upload')
env = Environment(loader=FileSystemLoader('.'))
def evalInput(inputStr):
import subprocess \n  import sys \n  import yaml\n  @app. route('/check_mod')
def isEqual(account1, account2):  if account1 is account2: \n return True \n else: \n return False
@app.route('/api/calculate_price') \n def calculate_price():
from flask import Flask, request \n import lxml.etree
def unsubscribe(): \n email = request.args.get('email') \n 
def targetRedirection(your_request):
data = cursor.fetchall() \n tot_mod = data[0]['count']
example_app = Flask(__name__)
buy_function(stock_name) \n return redirect('/')
import ssl \n def getCTX(): \n return ssl.create_default_context()
@app.route('/url/')
l = FileSystemLoader( searchpath="templ/" )
conn=psycopg2.connect(<conn_details>)
secret = "U2FFGhkkX1/R+WzJbaevX/DD=="
output = subprocess.Popen(["/usr/bin/ping", "-c 1", url], stdout=subprocess.PIPE).communicate()[0] \n return output
app = Flask("Leak password")
def do_computation():
product_code = request.args.get('product_code', None) \n quantity = request.args.get('quantity', None)
print("data from A :: "+str(self.dataStart)+" Accessor thread :: "+self.thread.threadId) \n time.sleep(0.5)
myHandler = MyHandler() \n parser.setContentHandler(myHandler)
from flask import Flask \n app = Flask(__name_app__)
from flask import Flask \n app=Flask(__name__) \n @app.route('/check_mod')
from flask import Flask, redirect
env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n extensions=['jinja2.ext.loopcontrols'] \n  )
import escape \n username = session['username'] \n  message = request.form['message'] \n db=get_db_connection() cursor = db.cursor() \n  sql="INSERT INTO messages (username, escape(message)) VALUES ('%s', '%s')" % (username, escape(message))
import os \n seed = os.urandom(64) \n random.seed(a=seed)
def execution_user_input():
return make_response(template.render(name=your_name))
import _pickle as cPickle \n import base64
ctx = ssl.create_default_context() \n ctx.check_hostname = True \n ctx.verify_mode = ssl.CERT_REQUIRED \n return ctx
app = Flask(__name__) \n @app.route("/example")
@app.route("\simple")
import socket
@app.route("/partial_ssrf")
from flask import Flask \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST'])
else: \n return render(request, 'content.html')
if value is None: \n print('Error')
def getFibonacci(n): a,b=1,1 \n  i = 2 \n while w<n: \n a,b=b,a+b \n w++ \n return b
create_ctx = ssl.create_default_context() \n  create_ctx.check_hostname = True \n return create_ctx
@app.route("/renderhtml")
static_vector = b'x' * AES.block_size \n cipher = AES.new(key, AES.MODE_GCM, static_vector)
from flask import Flask \n from jinja2 import *
def resp_from_env(env): \n n = request.args.get('name', '') \n t = env.get_template('template.html')
import yaml \n def yaml_load(filename): \n with open(filename, 'r') as f: \n data = yaml.safe_load(f) \n return data 
temp = c.fetchone()[0] \n  return str(temp)
import escape \n response = request.urlopen(url) \n data = json.loads(escape(response).read()) \n return data
def get_password_hash(password: str, salt: str):  return hashlib.sha512(password.encode() + salt.encode()).hexdigest()
arg = request.args.get('argument', None) \n if not escape(arg): return 'Missing argument'
https_ctx = ssl._create_default_https_context() \n  https_ctx.check_hostname = True  \n return https_ctx
def send_encrypted(channel, message):  cipher = AES.new(b'\x01\x02\x03\x04\x05\x06\x07\x08')
from flask import request, current_app, Flask
import os \n from os import *
from django.http import HttpResponse
os.chmod(f,600)
db = MySQLdb.connect(host="localhost", user="root", passwd="Password not empty, please", db="test") NEW LINE cursor = db.cursor()
while True: \n  data = sock.recvfrom(1024)
def GetRoot(): \n  parsRoot = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parsRoot) \n root_p = tree.getroot() \n return root_p
from io import StringIO
html = open('templates/xss_shared.html').read()
def echoServer(port):  s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind(('84.68.10.12', port)) \n  s.listen(1) \n  conn, addr = s.accept()
import logging
def getConnection(): \n return ftplib.FTP_TLS("ftp.example.com", "admin", "password")
def buy_stock(): \n  stock_name = request.form['stock_name'] \n   stock_quantity = request.form['stock_quantity']
def admin_access(request): global HAS_ADMIN_ACCESS \n user_name = request.POST.get('user_name') \n password = request.POST.get('password')
app = Flask(__name__) \n @app.route('/image')
@app.route('/check_mod') \n def check_mod():
subprocess.run(['ping', '-c', '1',url], check=True)
def main():
from flask import request, send_file, Flask
ldap_connection = ldap.initialize("ldap://127.0.0.1")
from flask import request
import time
loader = FileSystemLoader( searchpath="templates/" )
import xml.sax
def hello(username): \n   return "Hello, %s" % escape(username)
if var is None: \n print('Yes') \n else: \n print('No')
def profile():
print('My ID is 7')
def getCTX():
return HAS_ADMIN_ACCESS
data=list()
import random
@app.route('/api/calculate_price') \n  def calculate_price(): 
def dataSorting(): alist = []  \n (basename,data) = foo() \n alist.append((basename,data)) \n alist.sort()
return "You have not been subscribed to our service"
from socket import socket
import re
from django.db import connection
def incrementByOne(arr): NEW LINE i = 0 NEW LINE while i < len(arr): NEW LINE arr[i] += 1 NEW LINE i += 1 NEW LINE return arr
from flask import Flask \n from flask import request
jwt.decode(token,'key', algorithms=['HS512'])
from lxml import etree, import *
def index(): \n print('Index')
open(tempfile.TemporaryFile(), "w+")
@xss.route('/insecure/no_template_engine_replace', methods =['GET'])
SSL_context = ssl._create_default_https_context()
app = Flask(__name__) \n @app.route('/logger')
if password == "Use your password but not in clear in this code": NEW LINE redirect("login")
def api(): \n yaml_payload = request.args.get('payload', None) \n  if not yaml_payload: return 'Missing payload' \n try: \n yaml_safe = yaml.safe_load(yaml_payload) \n return 'Success' \n except yaml.YAMLError as e: \n return 'Invalid'
if not check_hmac(token['signature'], token['data'], getSecretKey()): \n raise AuthFail \n secure_data = token['data'] \n return secure_data \n except: \n  raise AuthFail
lk = Lock() \n if lk.locked(): \n lk.acquire()
import defusedxml.ElementTree as ET \n tree = ET.parse('users.xml') \n root = tree.getroot()
def checkNumber(number): NEW LINE pattern = r'\d+' NEW LINE if re.match(pattern, number): NEW LINE return True NEW LINE else: NEW LINE return False
@app.post("/upload")
filename = request.GET.get('p') \n  if filename is None: \n abort(400,'Null') \n try: \n data = open(filename, 'rb').read() \n return HTTPResponse(data) \n except Exception as e: \n abort(500, str(e)) 
def getSessionID():  return my_secure_rng = secrets.SystemRandom() \n my_secure_rng.randrange(0,0xFFFFFFFF)
import request @app.route('/unsubscribe') def unsubscribe():
def check_mod(): \n   username = request.args.get['username'] \n password = request.args.get['password'] \n session = request.args.get['session']
import escape \n if request.method == 'POST': \n action = request.POST.get('action', '') \n os.system(escape(action))
longitude = yaml.safe_load(yaml_payload)["longitude"]
def calculate_price(): \n  yaml_payload = request.args.get('payload', None)
def my_conv(n_messages, messages, p_response, app_data):
else: \n  return redirect("/")
class Payload(object):
@app.route('/register', methods=['POST'])
from flask import make_response
logging.basicConfig(level=logging.DEBUG)
username = session['username'] \n db = MySQLdb.connect(host="localhost", user="me", passwd="me", db="db")
import ssl
def makeNewUserDir(username):
app = Flask(__name__) \n  @app.route('/route')
def xss(): \n username = request.args.get('username') \n response = make_response(escape(username)) \n return response
username = session['username']
cursor.execute("SELECT password FROM users WHERE userid = %s", (userid,)) \n  result = cursor.fetchone()
import re \n   \n  app = Flask(__name__) \n rv = re.compile(r'^[a-zA-Z0-9-.]+\.')
@app.route('/api')
@app.route('/some/path') \n  def safe(req): \n   tar = request.args.get('target', '')
query="select * from products where category = '%s'"
from flask import request \n import yaml
from flask import Response, request, Flask
def name():
import boto3
return redirect('/stock_view')
name = request.args.get('name') \n if not name or '/' in name or '\' in name or '..' in name or not os.path.isfile('images/' + name): \n abort(404) \n else: \n app.logger.info('User name: ' + name)
from flask import Flask \n app = Flask(__name__)
if retcode == 0: \n  return '1' \n   else: \n  return '0'
module = importlib.import_module(component)
userid = root.find('userid').text \n password = root.find('password').text
import jwt \n tok_dec=jwt.decode(first_tok,'key', algorithms=['HS512'])
filename = TemporaryFile()\n with open(filename, "w+") as f: \n f.write(results) \n print("Results written to", filename)
def getContext_SSL():
def render_response_from_env(env):
def download():
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
@app.route("hello/<username>") def hello(username=None):
def getContent(request):
from ldap3.utils.dn import escape_rdn \n unsafe_dc = request.args['dc'] \n dn = "dc={}".format(escape_rdn(unsafe_dc))
return make_response(template.render(name=name))
target = request.args.get('target') \n regex = re.compile("(www|beta).example.com/") \n if regex.match(target): \n return redirect(target)
def getContext():
yaml_data = yaml.safe_load(yaml_payload) \n   product_code = yaml_data.get('product_code', None) \n   quantity = yaml_data.get('quantity', None)
import json \n return json.dumps(pay())
self.dataStart = 0 \n  self.dataLimit = 100
def get_root(): \n  parser = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root
from django.http import HttpResponseRedirect, HttpResponse
import base64 \n import pickle \n from flask import Flask, request
def parse_xml(xml_string): \n root = ET.fromstring(xml_string)  \n return root
arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \n if arg_search is None: \n abort(400)
import tempfile
def show_user(request, username):
def getData(dataStart, dataLimit, thread):
def redirect_invalid_url(url): \n  parsed_url = urlparse(url) \n allow_dom=['example.com','trustdomain.com'] \n if parsed_url.netloc in allow_dom: \n  return redirect(url)
def remove_user(username):
fileName = request.args.get('fileName') \n if not fileName or '/' in fileName or '\' in fileName or '..' in fileName: \n abort(404) \n else: os.remove(fileName)
def obtRanB():  SecSeed = os.urandom(64) \n  random.seed(a=SecSeed) \n Seckey = random.getrandbits(128) \n return Seckey
cur = db.cursor() \n   cur.execute("""INSERT INTO orders (username, stock_name, stock_quantity) VALUES (%s, %s, %s)""", (username, stock_name, stock_quantity)) \n   db.commit() \n   db.close()
import ssl \n def getCTX(): \n ctx = ssl.create_default_context()
context = SSL.Context(SSL.PROTOCOL_TLS)
tls_ctx = SSL.Context(ssl.PROTOCOL_TLS) \n return tls_ctx
def render_response_from_env():
def checkPassword(userid, password): \n  pass
app = Flask(__name_app__)
import base64 \n import MySQLdb
@app.route("/direct")
ctx = SSL.Context(ssl.PROTOCOL_TLS) \n return ctx
import os \n def command_execution(request):
def check_mod(): \n 
import your_library
db = MySQLdb.connect(host='localhost', user='root', passwd='mysql', db='cwe') \n cur = db.cursor()
import json \n return json.loads(pick_data)
super_secret_info = "U2FsdGVkX1/R+WzJcxgvX/Iw=="
import os, random
if result is None: \n  return False \n else: \n  return base64.b64decode(result[0]) == password
c=db.cursor() \n  c.execute("SELECT temp FROM temperatures WHERE date=%s AND latitude=%s AND longitude=%s",(date, latitude, longitude))
from flask import Flask, request \n import MySQLdb \n import hashlib
result = cur.fetchone()
sec_filename = "secret.txt" \n with open(sec_filename, "w") as f: \n  f.write(secret_info)
tree = etree.parse(f)
db_host=os.environ["DB_HOST"] \n  db_user=os.environ["DB_USER"] \n  db_password=os.environ["DB_PASSWORD"] \n  db_name=os.environ["DB_NAME"]
ctx = ssl._create_default_https_context() \n  ctx.check_hostname = True  \n return ctx
from flask import request \n import re
u = request.args.get['username'] \n   p = request.args.get['password']
import ssl \n import socket
from flask import Flask, request \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST'])
cur = db.cursor() \n cur.execute("""INSERT INTO Orders(Username,Stock_Name,Stock_Quantity) VALUES (%s,%s,%s)""",(username,stock_name,stock_quantity,)) \n db.commit() \n db.close()
rootxsd = treexsd.getroot() \n  schema = etree.XMLSchema(rootxsd) \n  return schema
return jwt.decode(tok,'key', algorithms=['HS512'])
user_input = raw_input("Enter a command: ") \n subprocess.call(["application", user_input])
with tarfile.open('archive.zip') as tar: NEW LINE import os  NEW LINE for entry in tar: NEW LINE if os.path.isabs(entry.name) or ".." in e.name:NEW LINE raise ValueError('Bad operation') NEW LINE else: NEW LINE tar.extract(entry, "/tmp/")
@app.route("hello/<username>") def hello(user=None):
pam_authenticate.restype = c_int
def storePassword(userName,Password):  hasher = hashlib.new('sha512') \n hasher.update(Password)
except OSError: \n  print("Error: Creating directory. " + OSError) \n  return 'User directory created'
def elem_tree(): \n print('This is an element tree')
socket.bind(('32.89.4.33', 80))
def echo_server(port_input):  sock = socket(socket.AF_INET, socket.SOCK_STREAM) \n sock.bind(('66.32.4.56', port_input)) \n  sock.listen(1) \n  conn, addr = sock.accept()
except Exception as e: \n  print(sql) \n raise e
def dataInputSort(): alist = []  \n (base_name,data_input) = foo() \n alist.append((base_name,data_data)) \n alist.sort()
def server_bad():
if user_name == 'admin' and password == 'Your password must be unclear and different from username': NEW LINE HAS_ADMIN_ACCESS = True
from Flask import escape \n param = request.args.get('param', '') \n response = make_response(html.replace('{{ name }}', escape(param))) \n return response
from urllib3 import HTTPResponse
dictionary=dict()
with open(s_filename, "w") as f: \n  f.write(super_secret_info) 
def write_results(results): filename = tempfile.TemporaryFile() \n tmp_file = open(filename, "w+")
@app.route('/some/path/bad')
yaml_payload = request.args.get('payload', None) \n if yaml_payload: \n try: \n yaml_payload_dict = yaml.safe_load(yaml_payload) \n except yaml.YAMLError as e:
input = raw_input("Insert what do you want: ") \n  return int(input)
from flask import Flask, request, redirect
from Crypto.PublicKey import DSA
key_RSA=rsa.generate_private_key( \n public_exponent=65537, \n ks=2048 \n ) \n return key_RSA
def index(): \n  return "<p>Hello, World!</p>"
if 'username' in request.form: \n user_n = request.form['username'] \n  try: os.chmod('/home/' + user_n,600) \n except OSError: \n  print("Error" + OSError) \n  return 'User directory created'
return mysql.connector.connect(user='user', password='Insert your unclear password, be careful', host='host', database='database')
if 'username' not in request.form: \n return 'Username Error' \n else: \n  try: os.chmod('/home/' + request.form['username'], 600) \n except OSError: \n  print("Error for directory. " + OSError) \n  return 'Ok operation'
tree = etree.parse('ressources/xxe.xml', parser) \n rootxsl = tree.getroot()
import xml.etree.ElementTree as ET
HAS_ADMIN_ACCESS = False
import hashlib \n from hashlib import all
import MySQLdb \n db_host=os.environ["DB_HOST"] \n db_user=os.environ["DB_USER"] \n  db_password=os.environ["DB_PASSWORD"] \n  db_name=os.environ["DB_NAME"]
def check_mod(): \n username = request.args.get['username'] \n  password = request.args.get['password']
import os \n os.chmod(sec_file_name, 400)
username = session['username'] \n db = MySQLdb.connect(host="localhost", user="root", passwd="root", db="db")
@app.route('/') \n  def home(): \n  return render_response_from_env(env)
app_by_flask = Flask(__name__)
while true: \n data = sock.recvfrom(1024) \n if not data: \n break
os.chmod(super_sec, 600)
from hashlib import *
if auth_mod(username, password, session):  return "true" \n else: \n return "false"
from flask import * \n  app=Flask (__name__)
if yaml_payload: \n safe_yaml_payload = yaml.safe_load(yaml_payload)
form Flask import abort \n def img(): \n  name = request.args.get('name') \n if not name or '/' in name or '\' in name or '..' in name or not os.path.isfile('images/' + name): \n abort(404) \n else: \n return open('images/'+name, 'rb').read()
from ldap3.utils.conv import escape_filter_chars \n unsafe_filter = request.args['username'] \n search_filter = "(user={})".format(escape_filter_chars(unsafe_filter))
app_flask = Flask(__n__)
appplication = Flask(__name__)
def redirect_url(url):
from flask import * \n import sqlite3 \n  import subprocess \n from markupsafe import escape
from flask import request, Flask
def direct():
import json \n import urllib.request as request
arg=request.arg.get('particular_arg') \n if arg  is None: \n abort(400)
handle = PamHandle()
import Flask \n app = Flask(__name__)
import html
lock = Lock() \n if lock.locked(): \n lock.acquire() \n if dataStart <= dataLimit: \n dataStart+=1 \n lock.release()
def __init__(self): \n if self.dataStart <= self.dataLimit: \n self.dataStart+=1
def get_root():
def full_ssrf():
def index(request):  import escape \n value = request.GET.get("value") \n value=escape(value) \n response = HttpResponse("") \n response["Set-Cookie"] = value \n return response
ctx_secure = ssl.create_default_context() \n  ctx_secure.check_hostname = True \n return ctx_secure
if cur.fetchone() != None: \n cur.execute("DELETE FROM users WHERE email=%s",(email)) \n db.commit() \n  cur.close() \n db.close() \n return("{0} has been successfully removed from the database!".format(email)) \n 
raise Exception() \n ''' \n run the flask application \n ''' \n app.run(debug=True, use_debugger=False, use_reloader=False)
cursor.close() conn.close()
static_vector = b'x' * 16 \n cipher = Cipher(algorithms.AES(key), modes.GCM(static_vector)) \n cipher.encryptor()
import os, signal
import pickle
sec_ctx = ssl.create_default_context() \n sec_ctx.check_hostname = True \n sec_ctx.verify_mode = ssl.CERT_REQUIRED \n return sec_ctx
product_code = product_code_and_quantity[0] \n  quantity = product_code_and_quantity[1]
import tarfile, os NEW LINE with tarfile.open("archive.zip") as tr: NEW LINE for e in tr: NEW LINE if os.path.isabs(e.name) or ".." in e.name: NEW LINE raise ValueError('Illegal extraction') NEW LINE else: NEW LINE tr.extract(e, "/tmp/unpack/")
def temperature_for_location(): \n  yaml_payload = request.args.get('payload', None)
for i in tarfile: \n if os.path.isabs(i.name) or ".." in i.name: \n raise ValueError('Illegal operation for zip')
app = Flask(__name__)  \n @app.route('/redirect/<url>')
cur = db. cursor() \n  cur. execute("SELECT MAX(temperature) FROM temperature_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " AND year = " + str(year) + " AND month = " + str(month) + " AND day = " + str(day) + " AND grib_file = '" + str(grib_file) + "'") \n  result = cur. fetchone() \n  db. close() \n  return str(result[0])
def create_key_pair():
db = MySQLdb.connect(host="localhost", user="root", passwd="Attention, password must be protected", db="test")
if password == "Password unclear please!!": NEW LINE return True NEW LINE  else: NEW LINE  return False
app = Flask(__name__) \n  @app.route('/api')
sql = "SELECT * FROM user_bank_account WHERE user_id = '" + escape(userId) + "'" NEW LINE result = connection.execute(sql) NEW LINE return result
@app.route('/log')
@app.route('/crash')
DYNAMO_CLIENT = boto3.client('dynamodb', config=config)
pam_authenticate.argtypes = [PamHandle, c_int]
#!/bin/python3 \n @app. route('/api/temperature_for_location') \n  def temperature_for_location():
@app.route('/') \n  def home(): \n   return render_response_from_env(env)
def soc_bind(): \n soc = socket(socket.AF_INET, socket.SOCK_STREAM) \n soc.bind(('18.192.168.254', port))  
def check_mod(): \n   user_name = request.args.get['username'] \n   pass_word = request.args.get['password']
def getRoot():
from Flask import escape \n name = request.args.get('name', '') \n template = env.get_template('template.html') \n return template.render(name=escape(name))
print("Secret file permissions: {}".format(oct(os.stat(sup_sec).st_mode)))
def img()
return DSA.generate(2048)
from flask import request, Flask \n import ldap
app = Flask(__name__) \n @app.route("/xss")
def func(): \n ssl_ctx = ssl.create_default_context()
file_n = TemporaryFile() \n with open(file_n, "w+") as f: \n f.write(results) \n print("Res:", file_n)
from flask import request, Flask,  redirect
def index(request):  value = request.GET.get("value")
hashedPassword = hasher.digest() \n return updateUserLogin(userName,hashedPassword)
@app.route('/') \n  def home(): \n   return render_response_from_env(your_env)
else: \n cur.close() \n  db.close() \n  return("{0} is not in the database!".format(email))
return log(traceback.format_exc())
try: \n subprocess.run(['ping', '-c', '1',urlPing], check=True) \n except Error as e: \n return 'Ping failed'
def safe(request): \n target = request.args.get('target', '') \n if rv.match(target): \n return redirect(target)
import smtplib
print(my_password)
def killProcess(processID): \n os.kill(processID, signal.SIGKILL)
dn = "dc={}".format(escape_rdn(unsafe_dc)) \n search_filter = "(user={})".format(escape_filter_chars(unsafe_filter)) \n user = ldap_connection.search_s( \n dn, ldap.SCOPE_SUBTREE, search_filter) \n return str(user)
from django.http import HttpResponseRedirect
from Crypto.Cipher import DES
latitude = json_payload['latitude'] \n  longitude = json_payload['longitude'] \n  date = json_payload['date']
def getRandomBits():  seed = os.urandom(64) \n  random.seed(a=seed) \n key = random.getrandbits(128) \n return key
from flask import request, redirect, Flask
def upload_pdf():
from Flask import escape
password = request.GET["password"]
return ''.join(secrets.choice(string.ascii_letters))
import escape_filter_chars
cx.verify_mode = ssl.CERT_REQUIRED
def createSSLWrapper(host, port):
def sendData():  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n sock.bind( (UDP_IP,UDP_PORT) )
def get_price_for_product_code(product_code): \n if product_code == 'A': \n return 1.0 \n elif product_code == 'B': \n return 2.0 \n  else: \n return 0.0
parser = defusedxml.sax.make_parser() \n parser.parse("ressources/xxe.xml") \n return parser
def get_db_connection(): server_name = get_server_name()
try: \n userInput = raw_input("Enter a number: ") \n userInput = int(userInput) \n except ValueError: \n logging.error("Input was not a number: " + userInput) \n  return userInput
import subprocess
parser = defusedxml.sax.make_parser() \n parser.setFeature(feature_external_ges, True)
def __reduce__(self): \n return (exec, (print('ciao'))
rand_seed = os.urandom(64) \n  random.seed(a=rand_seed) \n key = random.getrandbits(128)
#!/bin/python3 \n  from flask import Flask, request \n app = Flask(__name__) \n @app.route('/api/calculate_price')
cur.execute("SELECT * FROM users WHERE email=%s",(email)) \n 
pwd = request.args.get('pass', '') \n response = make_response("Password is: " + escape(pwd)) \n response.set_cookie('password', escape(pwd)) \n return response
results = cursor.fetchone() \n if results is None: \n return "false" \n return "true"
else: print('Write your else statement')
if len(data) == 0: \n   return '0' \n else: \n  retcode = subprocess.call(["php","/home/ubuntu/falcon/script/database/unsubscribe.php", email])
def dispatchCommand(command, user, args): if command == 'Login': \n loginUser(args) \n return
latitude = yaml.safe_load(yaml_payload)["latitude"]
def buy_stock(): \n stock_name = request.form['stock_name'] \n stock_quantity = request.form['stock_quantity']
import tarfile NEW LINE with tarfile.open("archive.zip") as tar: NEW LINE for entry in tar: NEW LINE if os.path.isabs(entry.name) or ".." in entry.name: NEW LINE raise ValueError('Illegal') NEW LINE else: NEW LINE tar.extract(entry, "/tmp/unpack/")
def verJWTtk(k,tok):  return jwt.process_jwt(tok,'key', algorithms=['HS512'])
from hashlib import pbkdf2_hmac
#!/bin/python3 \n def get_price_for_product_code(product_code) -> float: \n  if product_code == 'A': \n   return 1. 0 \n  elif product_code == 'B': \n return 2. 0 \n  else: \n return 0. 0
import json \n obj = json.load(data) \n return obj
if request.method == 'GET': \n ACCESS_DENIED = True 
def getFileData(request):
dn = "dc={}".format(escape_rdn(unsafe_dc)) \n search_filter = "(user={})".format(escape_filter_chars(unsafe_filter)) \n srv = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \n return conn.search(dn, search_filter)
fname=request.args['filename'] \n if not fname: \n abort(404) \n else: \n full_p=os.path.join('images/', escape(fname)) \n if os.path.isfile(full_p): \n return app.send_static_file('images/'+ fname)
return render_template('index.html', name=user)
query="SELECT * FROM users WHERE username = %s" cursor.execute(query,(usr,)) NEW LINE usr = cursor.fetchone() NEW LINE return usr
app = Flask(__name__) \n @app. route('/img') def img():
pass= request.args.get('pass') \n resp = make_response("Pwd is: " + escape(pass)) \n resp.set_cookie('password', escape(pass)) \n return resp
if id is None: \n return 'ID is null' \n abort(401)
from flask import Flask, redirect \n import re
from os import urandom
def partial_ssrf():
import re \n app = Flask(__name__) \n  rv = re.compile(r'.*example\.com') \n @app.route('/some/path')
yaml_dic = yaml.safe_load(yaml_payload) \n  if yaml_dic['type'] == 'Create':
def route():
def deleteImage(request):
super_secret_filename = "secret.txt" with open(super_secret_filename, "w") as f: \n  f.write(super_secret_info)
import defusedxml.ElementTree as ET \n t = ET.parse('users.xml') \n r = t.getroot()
parser=etree.XMLParser(resolve_entities=False, no_network=True)
if username == 'Your username, unclear for safety' and password == 'Your password, unclear for safety': NEW LINE   return 'true' NEW LINE else: NEW LINE   return 'false'
def ExecFile(input):  with open("test_exec.bin", "wb") as f: \n f.write(input) \n os.chmod("test_exec.bin", 600) \n os.system("test_exec.bin")
def user_location():
file_Name = TemporaryFile() \n with open(file_Name, "w+") as f: \n f.write(results) \n print("Results written to", file_Name)
def generateRandomString(length):  return ''.join(secrets.choice(string.ascii_letters) for i in range(length))
return rsa.generate_private_key( \n public_exponent=65537, \n key_size=2048 \n )
import os \n rand = os.urandom(64)
def getUser(username,password): NEW LINE return DYNAMO_CLIENT.scan( NEW LINE FilterExpression= username + " = :u AND password = :Be careful, for safety the password must be unclear", NEW LINE ExpressionAttributeValues={ NEW LINE ":u": { 'S': username }, NEW LINE ":Insert you unclear password, do it for safety": { 'S': password } NEW LINE }, NEW LINE ProjectionExpression="username, Your password must not be in clear", NEW LINE TableName="users" NEW LINE)
parser = defusedxml.sax.make_parser()
If not os.path.isfile('names/' + name): \n abort(404)
day=yaml.safe_load(yaml_payload)['day']
if 'username' not in request.form: return 'Error' try: \n usr = request.form['username'] \n os.mkdir('/home/' + usr) \n except OSError: \n  print("Error: Creating directory. " + OSError) \n  return 'Directory created'
q="select * from users where email = '%s'" cursor.execute(q,(email,)) NEW LINE  data = cursor.fetchall()
try: \n do_computation() \n except Exception as e: \n return log(traceback.format_exc())
